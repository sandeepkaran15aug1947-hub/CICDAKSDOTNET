trigger:
  branches:
    include:
      - main

variables:
  # CHANGE THESE
  acrName: 'myacr123456r'                     # your ACR name (no .azurecr.io)
  resourceGroup: 'myResourceGroup'         # your RG
  aksCluster: 'myAKSCluster'               # your AKS cluster name
  imageName: 'mydotnetapp'                 # repository name in ACR
  azureServiceConnection: 'cicdak' # service connection name in Azure DevOps

stages:
- stage: BuildAndDeploy
  displayName: Build (ACR) + Deploy (AKS)
  jobs:
  - job: BuildAndDeployJob
    displayName: Build image in ACR and deploy to AKS
    pool:
      name: aks
    steps:

    # 1) Build & push inside Azure (no local docker required)
    - task: AzureCLI@2
      displayName: 'Build image in ACR (az acr build)'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Building image with ACR Tasks..."
          # uses repo root Dockerfile by default; change --file if your Dockerfile is elsewhere
          az acr build --registry $(acrName) --image $(imageName):$(Build.BuildId) .

    # 2) Deploy to AKS: get creds then update deployment image
    - task: AzureCLI@2
      displayName: 'Deploy to AKS (kubectl set image)'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Getting AKS credentials..."
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster) --overwrite-existing

          # Update the k8s deployment's container image (change deployment name/container name if needed)
          echo "Setting new image on deployment..."
          kubectl set image deployment/mydotnetapp mydotnetapp=$(acrName).azurecr.io/$(imageName):$(Build.BuildId) --record

          # Wait for rollout
          kubectl rollout status deployment/mydotnetapp
