trigger:
  branches:
    include:
      - main   # pipeline runs when you push to main branch

variables:
  acrName: 'myacr123456r'               # your ACR name (without .azurecr.io)
  resourceGroup: 'myResourceGroup'      # your Azure resource group
  aksCluster: 'myAksCluster'            # your AKS cluster name
  imageName: 'mydotnetapp'              # your app/image name
  azureServiceConnection: 'cicdak'      # DevOps service connection name

stages:
- stage: BuildAndDeploy
  displayName: Build in ACR and Deploy to AKS
  jobs:
  - job: BuildAndDeployJob
    displayName: Build and Deploy
    pool:
      vmImage: 'ubuntu-latest'   # üëà use Microsoft-hosted Linux agent

    steps:
    # Step 1: Start message
    - script: echo "üöÄ Starting build and deploy pipeline..."
      displayName: 'Start Pipeline'

    # Step 2: Build image in ACR
    - task: AzureCLI@2
      displayName: 'Build image in ACR (az acr build)'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "üî® Building Docker image in ACR..."
          az acr build --registry $(acrName) --image $(imageName):$(Build.BuildId) .

    # Step 3: Deploy to AKS
    - task: AzureCLI@2
      displayName: 'Deploy to AKS (kubectl set image & rollout)'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "‚õ¥Ô∏è Connecting to AKS..."
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster) --overwrite-existing

          echo "üì¶ Updating deployment with new image..."
          kubectl set image deployment/mydotnetapp mydotnetapp=$(acrName).azurecr.io/$(imageName):$(Build.BuildId) --record

          echo "üîç Waiting for rollout to finish..."
          kubectl rollout status deployment/mydotnetapp

          echo "‚úÖ Deployment complete!"
