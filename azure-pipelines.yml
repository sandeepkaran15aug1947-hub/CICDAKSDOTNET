trigger:
  branches:
    include:
      - main

variables:
  acrName: 'myacr123456r'                # your ACR name (no .azurecr.io)
  resourceGroup: 'myResourceGroup'       # your Resource Group
  aksCluster: 'myAksCluster'             # your AKS cluster name
  imageName: 'mydotnetapp'               # repository name in ACR
  azureServiceConnection: 'cicdak'       # service connection name in Azure DevOps

stages:
- stage: BuildAndDeploy
  displayName: Build (ACR) + Deploy (AKS)
  jobs:
  - job: BuildAndDeployJob
    displayName: Build image in ACR and deploy to AKS
    pool:
      name: aks   # or windows-latest if your org needs it
    steps:

    # 1) Build & push image to ACR
    - task: AzureCLI@2
      displayName: 'Build image in ACR'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Output "Building image in ACR..."
          az acr build --registry $(acrName) --image $(imageName):$(Build.BuildId) .

    # 2) Deploy to AKS (create if not exists, else update)
    - task: AzureCLI@2
      displayName: 'Deploy to AKS'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Output "Connecting to AKS..."
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster) --overwrite-existing

          $deployName = "$(imageName)"
          $image = "$(acrName).azurecr.io/$(imageName):$(Build.BuildId)"

          Write-Output "Checking if deployment exists..."
          $exists = kubectl get deployment $deployName --ignore-not-found

          if ($exists) {
            Write-Output "Deployment exists. Updating image..."
            kubectl set image deployment/$deployName $deployName=$image
          }
          else {
            Write-Output "Deployment not found. Creating new deployment..."
            kubectl create deployment $deployName --image=$image
            kubectl expose deployment $deployName --type=LoadBalancer --port=80 --target-port=80
          }

          Write-Output "Waiting for rollout..."
          kubectl rollout status deployment/$deployName
